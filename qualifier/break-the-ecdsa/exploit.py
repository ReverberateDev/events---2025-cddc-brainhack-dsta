# from hashlib import sha256
# from ecdsa import SECP256k1

# n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141

# # Given values
# r = 81210355722750344493541519494641458710145722871994877785183554697310523407018
# h1 = 45643200378651069483892104393394606812504455659831083323743202489147422538955
# h2 = 74831345439009646272332597737070016777412939113737083148228963710487431876647
# s1 = 110764343964105699917226529930289538481215574456544978805357332521308340464732
# s2 = 90138993253633063487274662700800979929978777245182171200537527514756442604713

# # Compute k
# k = ((h1 - h2) * pow(s1 - s2, -1, n)) % n
# print("k =", k)

# # Compute d (private key)
# d = ((s1 * k - h1) * pow(r, -1, n)) % n
# print("d =", hex(d))

# # priv key is 0x9f9068a0cc25f39b9c5fba5bb88d75bc5e4503a8406101a3195dc395194ea690

from itertools import product
from mnemonic import Mnemonic
from bip32utils import BIP32Key
import hashlib

# Provided private key
target_priv_key = '0x9f9068a0cc25f39b9c5fba5bb88d75bc5e4503a8406101a3195dc395194ea690'

# Dex dictionary
dex_dict = [
    'v1ew', '5tr0ng', 'app1e', 'fr13nd', '7hank5', 'sch00l', 'c0d3', 'kn0w1edg3',
    'g00d', 'b4d', 'dr34m', 'r1v3r', 'mou7a1n', 'f0r3st', '5kyb1u3', 'p14n3t',
    'c4r', 'b1k3', 'b00k', '5tor3', 'l4ugh', 'sm1l3', 'v1ct0ry', 'p0w3r',
    '3n3rgy', '7r4v3l', 'p3ac3', 'f1gh7', 'h0p3', '4n7', '1i0nkin9', '7ig3r',
    'p4d0c0in', '0c34n', 'w4v3', '5h0r3', 'c4v3', 'm00n', '5un', '5tar',
    '7r33', 'fl0w3r', '5e3d', 'gr455', 'b3', '4ir', 'c10ud', 'r41n', '5n0w', '5t0rm'
]

mnemo = Mnemonic("english")

for word1, word2, word3 in product(dex_dict, repeat=3):
    mnemonic_words = [
        'BIP-39', 'SECP256k1', word1, '5eed', 'r4nd0m', word2,
        'g00d', '5olve', 'c0ffe', word3, 'pe4nut', '5mart'
    ]
    mnemonic_phrase = ' '.join(mnemonic_words)

    # Convert mnemonic to seed
    seed = mnemo.to_seed(mnemonic_phrase, passphrase="")

    # Derive private key using BIP32
    bip32_root_key_obj = BIP32Key.fromEntropy(seed)
    derived_priv_key = '0x' + bip32_root_key_obj.PrivateKey().hex()

    if derived_priv_key == target_priv_key:
        print(f"Found matching words: {word1}, {word2}, {word3}")
        print(f"Mnemonic: {mnemonic_phrase}")
        print(f"Private Key: {derived_priv_key}")
        break


# CDDC2025{p4d0c0in_b3_5tr0ng_0x9f9068a0cc25f39b9c5fba5bb88d75bc5e4503a8406101a3195dc395194ea690}